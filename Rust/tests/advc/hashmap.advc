var i num
var end_i num

var T list
var k num
var m num

push 100
set m

push 13
set k

get m
set end_i
# Fill map with negative values
for i to end_i {
  push -1
  get T
  append
  set T
}

get T
set __R0__

get k
set __R1__

push m
set __R2__

call hash_insert

## What is hash_insert(13) ?
print initial
push 32
outC

get __R0__
outN
push 10
outC

##

get T
set __R0__

get k
set __R1__

push m
set __R2__

call hash_insert

## What is it repeated?
print repeat_
push 32
outC

get __R0__
outN
push 10
outC

##

## Update k
push 3
set k
## /

get T
set __R0__

get k
set __R1__

push m
set __R2__

call hash_insert

print change_
push 32
outC
get __R0__
outN
push 10
outC

print search
push 10
outC

#####

push 13
set k

#####

get T
set __R0__

get k
set __R1__

push m
set __R2__

call hash_search

print initial
push 32
outC
get __R0__
outN
push 10
outC

####

push 3
set k

#####

get T
set __R0__

get k
set __R1__

push m
set __R2__

call hash_search

print change_
push 32
outC
get __R0__
outN
push 10
outC

####

push 6
set k

#####

get T
set __R0__

get k
set __R1__

push m
set __R2__

call hash_search

print outside
push 32
outC
get __R0__
outN
push 10
outC



#########

goto term


# ################### #
# Hash implementation #
# ################### #

# 0 = k, 1 = i, 2 = m
label hash
# (hash1(key) + i * hash2(key)) % TABLE_SIZE

# hash1(key) = key % TABLE_SIZE
get __R0__
get __R2__
mod

# hash2(key) = PRIME â€“ (key % PRIME) ## PRIME < TABLE_SIZE
# PRIME
push 67

# key % PRIME
get __R0__
push 67
mod

sub

# (hash1(key) + i * hash2(key)) % TABLE_SIZE
get __R1__
mul
add

get __R2__
mod

set __R0__
return

# 0 = T, 1 = k, 2 = m
label hash_insert
  local_var T list
  local_var k num
  local_var m num
  local_var i num
  local_var j num

  local_var wl num
  local_var end_wl list

  get __R0__
  set T

  get __R1__
  set k

  get __R2__
  set m

  # set i
  push 2
  set i

  # set j
  push 1
  set j

  for wl to end_wl {

    # j = h(k,i)
    get k
    set __R0__

    get i
    set __R1__

    get m
    set __R2__

    call hash

    get __R0__
    set j
    # /

    # if T[j] == nil
    # is it nil ## Todo: handle -1 as key..
    index T[j]
    push -1
    eq
    if {
      # T[j] = k
      get k
      get T
      get j
      set_elem

      # Return j
      get j
      set __R0__

      return
    } else {
      # i += 1
      push 1
      get i
      add
      set i
    }

    # i == m
    get i
    get m
    eq
    if {
      break 0
    } else {}

  }

  # Return error
  push -1
  set __R0__

return

# 0 = T, 1 = k, 2 = m
label hash_search
  local_var T list
  local_var k num
  local_var m num
  local_var i num
  local_var j num

  local_var wl num
  local_var end_wl list

  get __R2__
  set m
  get __R0__
  set T
  get __R1__
  set k

  # set i
  push 2
  set i

  # set j
  push 1
  set j

  for wl to end_wl {

    # j = h(k,i)
    get k
    set __R0__

    get i
    set __R1__

    get m
    set __R2__

    call hash

    get __R0__
    set j
    # /

    # if T[j] == k
    index T[j]
    get k
    eq
    if {
      # Return j
      get j
      set __R0__

      return
    } else {
      # i += 1
      get i
      push 1
      add
      set i
    }

    # T[j] is nil
    index T[j]
    push -1
    eq

    # i == m
    get i
    get m
    eq

    # or
    add
    not
    not
    if {
      break 0
    } else {}

  }

# Return error
push -1
set __R0__

return
