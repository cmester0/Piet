push [
outC

lib_get_list


_, next_index = handle_smpl_instr(var_list, instrs, next_index, ["push",str(ord("["))])
            _, next_index = handle_smpl_instr(var_list, instrs, next_index, ["outC"])

            _, next_index = handle_smpl_instr(var_list, instrs, next_index, ["get_list"])
            _, next_index = handle_smpl_instr(var_list, instrs, next_index, ["length"])

            label_index = goto_new_label(instrs, next_index) # move all elements to new array
            _, next_index = handle_smpl_instr(var_list, instrs, label_index, ["push", "1"])
            _, next_index = handle_smpl_instr(var_list, instrs, next_index, ["sub"])
            _, next_index = handle_smpl_instr(var_list, instrs, next_index, ["dup"])
            _, next_index = handle_smpl_instr(var_list, instrs, next_index, ["push", "-1"])
            _, next_index = handle_smpl_instr(var_list, instrs, next_index, ["eq"])

            instrs[next_index][1].append("push 1")
            instrs[next_index][1].append("sub")

            swap(instrs, next_index)
            return_index, in_bounds_index = branch_new_labels(instrs, next_index)

            instrs[in_bounds_index][1].append("push 3")
            instrs[in_bounds_index][1].append("push -1")
            instrs[in_bounds_index][1].append("roll")
            swap(instrs, in_bounds_index)
            _, next_index = handle_smpl_instr(var_list, instrs, in_bounds_index, ["outN"])
            _, next_index = handle_smpl_instr(var_list, instrs, next_index, ["push",str(ord(","))])
            _, next_index = handle_smpl_instr(var_list, instrs, next_index, ["outC"])

            instrs[next_index][1].append("goto l" + str(label_index))

            _, next_index = handle_smpl_instr(var_list, instrs, return_index, ["pop"])
            _, next_index = handle_smpl_instr(var_list, instrs, next_index, ["push",str(ord("]"))])
            _, next_index = handle_smpl_instr(var_list, instrs, next_index, ["outC"])

            index = next_index
            next_index = next_index
